(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $__mm_inuse (mut i32) (i32.const 0))
  (global $__mm_expand_by (mut i32) (i32.const 10))
  (global $__mm_extra_offset (mut i32) (i32.const -1))
  (global $@stack (mut i32) (i32.const 8))
  (global $__mm_first (mut i32) (i32.const -1))
  (global $rand_x i32 (i32.const 179424673))
  (global $__mm_size (mut i32) (i32.const -1))
  (global $rand_y i32 (i32.const 376424971))
  (global $mm_freed (mut i32) (i32.const 0))
  (global $__mm_capacity (mut i32) (i32.const 0))
  (global $world (mut i32) (i32.const 0))
  (global $mm_allocated (mut i32) (i32.const 0))
  (global $__mm_stat_freed (mut i32) (i32.const 0))
  (global $__mm_start (mut i32) (i32.const 0))
  (global $__mm_stat_allocated (mut i32) (i32.const 0))
  (memory (export "memory") 1)
  (data (i32.const 1024) "A/R %d/%d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->level == w->level - 1\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->size == w->size/N\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->x0 == w->x0 + g->size * x\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22g->y0 == w->y0 + g->size * y\22 @ line %d\0A\00set_cell(%d, %d, %d)\0A\00Point %d, %d is outside the world %d, %d, %d, %d\0A\00xmin = %d, xmax = %d, ymin = %d, ymax = %d\0A\00Level: %d => %d, Size: %d => %d\0A\00Converged to original box @ %d, %d (size %d)\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w->x0 + xp*wsize == world->x0\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w->y0 + yp*wsize == world->y0\22 @ line %d\0A\00w->x0 = %d, xp = %d, wsize = %d, w->y0 = %d, yp = %d\0A\00Entering (%d,%d) into <%d,%d,%d,%d>\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w->x0 <= x && x < w->x0 + w->size && w->y0 <= y && y < w->y0 + w->size\22 @ line %d\0A\00Assigned <%d,%d,%d>[%d] = %d\0A\00Going down to level %d, xp = %d, yp = %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22t1 == w->level\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22t2 == w->x0\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22t3 == w->y0\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22size == w->size\22 @ line %d\0A\00Done!\0A\00Trying to locate (%d,%d) in <%d,%d,%d,%d>\0A\00Got to the bottom <%d,%d,%d>[%d]\0A\00X\00+\00.\00\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22w\22 @ line %d\0A\00..............x......xxx.......x.............\00\E2\80\BC\EF\B8\8F ASSERTION: \22sX * sY == strlen(initial_pos)\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22get_cell(x, y, 0) == pos_0[y*X+x]\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22stat_f.count == stat_i.count\22 @ line %d\0A\00\E2\80\BC\EF\B8\8F ASSERTION: \22stat_f.hash == stat_i.hash\22 @ line %d\0A\00Cycle detected at iter = %d\0A\00(%d,%d): \E2\91\A9=%d, \E2\88\9E=%d\0A\00Consistency broke down on iteration %d\0A\00Showing window %d <= x <= %d, %d <= y <= %d\0A\00\E2\91\A9 FINITE\0A\00\E2\88\9E INFINITE\0A\00Successfully completed %d iterations\0A\00A/R/C: %d/%d/%d; CAP: %d/%d\0A\00")
  (func $alloc_new_box (param $level i32) (param $x0 i32) (param $y0 i32) (result i32)
    (local $box i32)
    (local $size i32)
    (local $k i32)
    (global.set $mm_allocated (i32.add (global.get $mm_allocated) (i32.const 1)))
    (local.set $box (call $malloc (select (i32.const 70) (i32.const 120) (i32.eqz (local.get $level)))))
    (memory.fill (local.get $box) (i32.const 0) (select (i32.const 70) (i32.const 120) (i32.eqz (local.get $level))))
    (local.set $size (i32.const 5))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $k) (local.get $level)))
        (local.set $size (i32.mul (local.get $size) (i32.const 5)))
        (local.set $k (i32.add (local.get $k) (i32.const 1)))
        (br $@block_1_continue)))
    (i32.store align=4 (local.get $box) (local.get $level))
    (i32.store align=4 (i32.add (local.get $box) (i32.const 4)) (local.get $x0))
    (i32.store align=4 (i32.add (local.get $box) (i32.const 8)) (local.get $y0))
    (i32.store align=4 (i32.add (local.get $box) (i32.const 12)) (local.get $size))
    (local.get $box))
  (func $release_box (param $box i32)
    (local $y i32)
    (local $x i32)
    (global.set $mm_freed (i32.add (global.get $mm_freed) (i32.const 1)))
    (if (i32.gt_s (i32.load align=4 (local.get $box)) (i32.const 0))
      (then
        (block $@block_1_1_break
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $y) (i32.const 5)))
            (block $@block_1_1_1_break
              (local.set $x (i32.const 0))
              (loop $@block_1_1_1_continue
                (br_if $@block_1_1_1_break (i32.ge_s (local.get $x) (i32.const 5)))
                (if (i32.load align=4 (i32.add (i32.add (local.get $box) (i32.const 20)) (i32.mul (i32.add (i32.mul (local.get $y) (i32.const 5)) (local.get $x)) (i32.const 4))))
                  (then
                    (call $release_box (i32.load align=4 (i32.add (i32.add (local.get $box) (i32.const 20)) (i32.mul (i32.add (i32.mul (local.get $y) (i32.const 5)) (local.get $x)) (i32.const 4)))))))
                (local.set $x (i32.add (local.get $x) (i32.const 1)))
                (br $@block_1_1_1_continue)))
            (local.set $y (i32.add (local.get $y) (i32.const 1)))
            (br $@block_1_1_continue)))))
    (call $free (local.get $box)))
  (func $set_cell (param $x i32) (param $y i32) (param $val i32) (param $plane i32) (param $age i32)
    (local $@stack_entry i32)
    (local $w i32)
    (local $t i32)
    (local $xp i32)
    (local $yp i32)
    (local $verbose i32)
    (local $box i32)
    (local $xmin i32)
    (local $ymin i32)
    (local $xmax i32)
    (local $ymax i32)
    (local $new_level i32)
    (local $new_size i32)
    (local $dx i32)
    (local $dy i32)
    (local $new_world i32)
    (local $wsize i32)
    (local.set $@stack_entry (global.get $@stack))
    (if (local.get $verbose)
      (then
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $val)))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
        (call $printf (i32.const 1263) (global.get $@stack))))
    (if (i32.eqz (global.get $world))
      (then
        (if (i32.eqz (local.get $val))
          (then
            (global.set $@stack (local.get $@stack_entry))
            (return)))
        (local.set $box (call $alloc_new_box (i32.const 0) (i32.sub (local.get $x) (i32.const 2)) (i32.sub (local.get $y) (i32.const 2))))
        (i32.store8 align=1 (i32.add (i32.add (local.get $box) (i32.const 20)) (i32.add (i32.add (i32.mul (i32.const 25) (local.get $plane)) (i32.mul (i32.const 5) (i32.sub (local.get $y) (i32.load align=4 (i32.add (local.get $box) (i32.const 8)))))) (i32.sub (local.get $x) (i32.load align=4 (i32.add (local.get $box) (i32.const 4)))))) (local.get $val))
        (global.set $world (local.get $box))
        (global.set $@stack (local.get $@stack_entry))
        (return)))
    (local.set $box (i32.load align=4 (i32.add (global.get $world) (i32.const 12))))
    (if (i32.eqz (block $@block_2_break (result i32) (drop (br_if $@block_2_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (global.get $world) (i32.const 4))) (local.get $x)))) (drop (br_if $@block_2_break (i32.const 0) (i32.ge_s (local.get $x) (i32.add (i32.load align=4 (i32.add (global.get $world) (i32.const 4))) (local.get $box))))) (drop (br_if $@block_2_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (global.get $world) (i32.const 8))) (local.get $y)))) (drop (br_if $@block_2_break (i32.const 0) (i32.ge_s (local.get $y) (i32.add (i32.load align=4 (i32.add (global.get $world) (i32.const 8))) (local.get $box))))) (i32.const 1)))
      (then
        (if (i32.eqz (local.get $val))
          (then
            (global.set $@stack (local.get $@stack_entry))
            (return)))
        (if (local.get $verbose)
          (then
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (global.get $world) (i32.const 4)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.add (i32.load align=4 (i32.add (global.get $world) (i32.const 4))) (local.get $box)) (i32.const 1))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (global.get $world) (i32.const 8)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.add (i32.load align=4 (i32.add (global.get $world) (i32.const 8))) (local.get $box)) (i32.const 1))))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 40)))
            (call $printf (i32.const 1285) (global.get $@stack))))
        (local.set $xmin (i32.load align=4 (i32.add (global.get $world) (i32.const 4))))
        (if (i32.lt_s (local.get $x) (local.get $xmin))
          (then
            (local.set $t (i32.sub (local.get $xmin) (local.get $x)))
            (if (i32.ne (i32.rem_s (local.get $t) (local.get $box)) (i32.const 0))
              (then
                (local.set $t (i32.add (local.get $t) (i32.sub (local.get $box) (i32.rem_s (local.get $t) (local.get $box)))))))
            (local.set $xmin (i32.sub (local.get $xmin) (local.get $t)))))
        (local.set $ymin (i32.load align=4 (i32.add (global.get $world) (i32.const 8))))
        (if (i32.lt_s (local.get $y) (local.get $ymin))
          (then
            (local.set $t (i32.sub (local.get $ymin) (local.get $y)))
            (if (i32.ne (i32.rem_s (local.get $t) (local.get $box)) (i32.const 0))
              (then
                (local.set $t (i32.add (local.get $t) (i32.sub (local.get $box) (i32.rem_s (local.get $t) (local.get $box)))))))
            (local.set $ymin (i32.sub (local.get $ymin) (local.get $t)))))
        (local.set $xmax (i32.add (i32.load align=4 (i32.add (global.get $world) (i32.const 4))) (local.get $box)))
        (if (i32.gt_s (i32.add (local.get $x) (i32.const 1)) (local.get $xmax))
          (then
            (local.set $t (i32.sub (i32.add (local.get $x) (i32.const 1)) (local.get $xmax)))
            (if (i32.ne (i32.rem_s (local.get $t) (local.get $box)) (i32.const 0))
              (then
                (local.set $t (i32.add (local.get $t) (i32.sub (local.get $box) (i32.rem_s (local.get $t) (local.get $box)))))))
            (local.set $xmax (i32.add (local.get $xmax) (local.get $t)))))
        (local.set $ymax (i32.add (i32.load align=4 (i32.add (global.get $world) (i32.const 8))) (local.get $box)))
        (if (i32.gt_s (i32.add (local.get $y) (i32.const 1)) (local.get $ymax))
          (then
            (local.set $t (i32.sub (i32.add (local.get $y) (i32.const 1)) (local.get $ymax)))
            (if (i32.ne (i32.rem_s (local.get $t) (local.get $box)) (i32.const 0))
              (then
                (local.set $t (i32.add (local.get $t) (i32.sub (local.get $box) (i32.rem_s (local.get $t) (local.get $box)))))))
            (local.set $ymax (i32.add (local.get $ymax) (local.get $t)))))
        (if (local.get $verbose)
          (then
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $xmin)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $xmax)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $ymin)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $ymax)))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
            (call $printf (i32.const 1335) (global.get $@stack))))
        (local.set $new_level (i32.load align=4 (global.get $world)))
        (local.set $new_size (local.get $box))
        (loop $@block_3_5_continue
          (local.set $new_size (i32.mul (local.get $new_size) (i32.const 5)))
          (local.set $new_level (i32.add (local.get $new_level) (i32.const 1)))
          (br_if $@block_3_5_continue (if (result i32) (i32.lt_s (local.get $new_size) (i32.sub (local.get $xmax) (local.get $xmin))) (then (i32.const 1)) (else (i32.ne (i32.lt_s (local.get $new_size) (i32.sub (local.get $ymax) (local.get $ymin))) (i32.const 0))))))
        (if (local.get $verbose)
          (then
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (global.get $world))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $new_level)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $box)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $new_size)))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
            (call $printf (i32.const 1379) (global.get $@stack))))
        (local.set $dx (i32.div_s (i32.add (i32.sub (local.get $new_size) (local.get $xmax)) (local.get $xmin)) (i32.const 2)))
        (if (i32.ne (i32.rem_s (local.get $dx) (local.get $box)) (i32.const 0))
          (then
            (local.set $dx (i32.add (local.get $dx) (i32.sub (local.get $box) (i32.rem_s (local.get $dx) (local.get $box)))))))
        (local.set $dy (i32.div_s (i32.add (i32.sub (local.get $new_size) (local.get $ymax)) (local.get $ymin)) (i32.const 2)))
        (if (i32.ne (i32.rem_s (local.get $dy) (local.get $box)) (i32.const 0))
          (then
            (local.set $dy (i32.add (local.get $dy) (i32.sub (local.get $box) (i32.rem_s (local.get $dy) (local.get $box)))))))
        (local.set $new_world (call $alloc_new_box (local.get $new_level) (i32.sub (local.get $xmin) (local.get $dx)) (i32.sub (local.get $ymin) (local.get $dy))))
        (local.set $w (local.get $new_world))
        (local.set $wsize (i32.div_s (local.get $new_size) (i32.const 5)))
        (block $@block_3_6_break
          (loop $@block_3_6_continue
            (local.set $xp (i32.div_s (i32.sub (i32.load align=4 (i32.add (global.get $world) (i32.const 4))) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (local.get $wsize)))
            (local.set $yp (i32.div_s (i32.sub (i32.load align=4 (i32.add (global.get $world) (i32.const 8))) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (local.get $wsize)))
            (if (i32.eq (local.get $wsize) (i32.load align=4 (i32.add (global.get $world) (i32.const 12))))
              (then
                (if (local.get $verbose)
                  (then
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.mul (local.get $xp) (local.get $wsize)))))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.mul (local.get $yp) (local.get $wsize)))))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $wsize)))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
                    (call $printf (i32.const 1412) (global.get $@stack))))
                (if (i32.ne (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.mul (local.get $xp) (local.get $wsize))) (i32.load align=4 (i32.add (global.get $world) (i32.const 4))))
                  (then
                    (i64.store align=8 (global.get $@stack) (i64.const 184))
                    (call $printf (i32.const 1458) (global.get $@stack))
                    (unreachable)))
                (if (i32.ne (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.mul (local.get $yp) (local.get $wsize))) (i32.load align=4 (i32.add (global.get $world) (i32.const 8))))
                  (then
                    (i64.store align=8 (global.get $@stack) (i64.const 185))
                    (call $printf (i32.const 1519) (global.get $@stack))
                    (unreachable)))
                (i32.store align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (i32.const 5) (local.get $yp)) (local.get $xp)) (i32.const 4))) (global.get $world))
                (br $@block_3_6_break)))
            (local.set $new_level (i32.sub (local.get $new_level) (i32.const 1)))
            (if (local.get $verbose)
              (then
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $xp)))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $wsize)))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $yp)))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 32)))
                (call $printf (i32.const 1580) (global.get $@stack))))
            (i32.store align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (i32.const 5) (local.get $yp)) (local.get $xp)) (i32.const 4))) (call $alloc_new_box (local.get $new_level) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.mul (local.get $xp) (local.get $wsize))) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.mul (local.get $yp) (local.get $wsize)))))
            (local.set $w (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (i32.const 5) (local.get $yp)) (local.get $xp)) (i32.const 4)))))
            (local.set $wsize (i32.div_s (local.get $wsize) (i32.const 5)))
            (br $@block_3_6_continue)))
        (global.set $world (local.get $new_world))))
    (local.set $w (global.get $world))
    (block $@block_4_break
      (loop $@block_4_continue
        (if (local.get $verbose)
          (then
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y)))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $w))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
            (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 12)))))
            (global.set $@stack (i32.sub (global.get $@stack) (i32.const 40)))
            (call $printf (i32.const 1634) (global.get $@stack))))
        (if (i32.eqz (block $@block_4_1_break (result i32) (drop (br_if $@block_4_1_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (local.get $x)))) (drop (br_if $@block_4_1_break (i32.const 0) (i32.ge_s (local.get $x) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))))) (drop (br_if $@block_4_1_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (local.get $y)))) (drop (br_if $@block_4_1_break (i32.const 0) (i32.ge_s (local.get $y) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))))) (i32.const 1)))
          (then
            (i64.store align=8 (global.get $@stack) (i64.const 205))
            (call $printf (i32.const 1671) (global.get $@stack))
            (unreachable)))
        (if (local.get $val)
          (then
            (i32.store align=4 (i32.add (local.get $w) (i32.const 16)) (local.get $age))))
        (if (i32.eqz (i32.load align=4 (local.get $w)))
          (then
            (local.set $xp (i32.sub (local.get $x) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
            (local.set $yp (i32.sub (local.get $y) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
            (if (local.get $verbose)
              (then
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $w))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.add (i32.mul (local.get $yp) (i32.const 5)) (local.get $xp))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $val)))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 32)))
                (call $printf (i32.const 1773) (global.get $@stack))))
            (i32.store8 align=1 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.add (i32.add (i32.mul (i32.const 25) (local.get $plane)) (i32.mul (i32.const 5) (local.get $yp))) (local.get $xp))) (local.get $val))
            (br $@block_4_break))
          (else
            (local.set $box (i32.div_s (i32.load align=4 (i32.add (local.get $w) (i32.const 12))) (i32.const 5)))
            (local.set $xp (i32.div_s (i32.sub (local.get $x) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (local.get $box)))
            (local.set $yp (i32.div_s (i32.sub (local.get $y) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (local.get $box)))
            (if (local.get $verbose)
              (then
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.load align=4 (local.get $w)) (i32.const 1))))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $xp)))
                (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $yp)))
                (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
                (call $printf (i32.const 1803) (global.get $@stack))))
            (if (i32.eqz (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (local.get $yp) (i32.const 5)) (local.get $xp)) (i32.const 4)))))
              (then
                (if (i32.eqz (local.get $val))
                  (then
                    (global.set $@stack (local.get $@stack_entry))
                    (return)))
                (i32.store align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (local.get $yp) (i32.const 5)) (local.get $xp)) (i32.const 4))) (call $alloc_new_box (i32.sub (i32.load align=4 (local.get $w)) (i32.const 1)) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.mul (local.get $xp) (local.get $box))) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.mul (local.get $yp) (local.get $box)))))))
            (local.set $xmin (i32.sub (i32.load align=4 (local.get $w)) (i32.const 1)))
            (local.set $ymin (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.mul (local.get $xp) (local.get $box))))
            (local.set $xmax (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.mul (local.get $yp) (local.get $box))))
            (local.set $w (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (local.get $yp) (i32.const 5)) (local.get $xp)) (i32.const 4)))))
            (if (i32.ne (local.get $xmin) (i32.load align=4 (local.get $w)))
              (then
                (i64.store align=8 (global.get $@stack) (i64.const 229))
                (call $printf (i32.const 1845) (global.get $@stack))
                (unreachable)))
            (if (i32.ne (local.get $ymin) (i32.load align=4 (i32.add (local.get $w) (i32.const 4))))
              (then
                (i64.store align=8 (global.get $@stack) (i64.const 230))
                (call $printf (i32.const 1891) (global.get $@stack))
                (unreachable)))
            (if (i32.ne (local.get $xmax) (i32.load align=4 (i32.add (local.get $w) (i32.const 8))))
              (then
                (i64.store align=8 (global.get $@stack) (i64.const 231))
                (call $printf (i32.const 1934) (global.get $@stack))
                (unreachable)))
            (if (i32.ne (local.get $box) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))
              (then
                (i64.store align=8 (global.get $@stack) (i64.const 232))
                (call $printf (i32.const 1977) (global.get $@stack))
                (unreachable)))))
        (br $@block_4_continue)))
    (if (local.get $verbose)
      (then
        (call $printf (i32.const 2024) (global.get $@stack))))
    (global.set $@stack (local.get $@stack_entry)))
  (func $get_cell (param $x i32) (param $y i32) (param $plane i32) (result i32)
    (local $@stack_entry i32)
    (local $verbose i32)
    (local $xp i32)
    (local $yp i32)
    (local $size i32)
    (local $w i32)
    (local.set $@stack_entry (global.get $@stack))
    (if (i32.eqz (global.get $world))
      (then
        (global.set $@stack (local.get $@stack_entry))
        (return (i32.const 0))))
    (local.set $w (global.get $world))
    (if (i32.eqz (block $@block_1_break (result i32) (drop (br_if $@block_1_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (local.get $x)))) (drop (br_if $@block_1_break (i32.const 0) (i32.ge_s (local.get $x) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))))) (drop (br_if $@block_1_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (local.get $y)))) (drop (br_if $@block_1_break (i32.const 0) (i32.ge_s (local.get $y) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))))) (i32.const 1)))
      (then
        (global.set $@stack (local.get $@stack_entry))
        (return (i32.const 0))))
    (loop $@block_2_continue
      (if (local.get $verbose)
        (then
          (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x)))
          (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
          (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y)))
          (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
          (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $w))))
          (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
          (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
          (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
          (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
          (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
          (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 12)))))
          (global.set $@stack (i32.sub (global.get $@stack) (i32.const 40)))
          (call $printf (i32.const 2031) (global.get $@stack))))
      (if (i32.eqz (block $@block_2_1_break (result i32) (drop (br_if $@block_2_1_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (local.get $x)))) (drop (br_if $@block_2_1_break (i32.const 0) (i32.ge_s (local.get $x) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 4))) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))))) (drop (br_if $@block_2_1_break (i32.const 0) (i32.gt_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (local.get $y)))) (drop (br_if $@block_2_1_break (i32.const 0) (i32.ge_s (local.get $y) (i32.add (i32.load align=4 (i32.add (local.get $w) (i32.const 8))) (i32.load align=4 (i32.add (local.get $w) (i32.const 12))))))) (i32.const 1)))
        (then
          (i64.store align=8 (global.get $@stack) (i64.const 258))
          (call $printf (i32.const 1671) (global.get $@stack))
          (unreachable)))
      (if (i32.eqz (i32.load align=4 (local.get $w)))
        (then
          (local.set $xp (i32.sub (local.get $x) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
          (local.set $yp (i32.sub (local.get $y) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
          (if (local.get $verbose)
            (then
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $w))))
              (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))))
              (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))))
              (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.add (i32.mul (local.get $yp) (i32.const 5)) (local.get $xp))))
              (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
              (call $printf (i32.const 2074) (global.get $@stack))))
          (global.set $@stack (local.get $@stack_entry))
          (return (i32.load8_s align=1 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.add (i32.add (i32.mul (i32.const 25) (local.get $plane)) (i32.mul (i32.const 5) (local.get $yp))) (local.get $xp))))))
        (else
          (local.set $size (i32.div_s (i32.load align=4 (i32.add (local.get $w) (i32.const 12))) (i32.const 5)))
          (local.set $xp (i32.div_s (i32.sub (local.get $x) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (local.get $size)))
          (local.set $yp (i32.div_s (i32.sub (local.get $y) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (local.get $size)))
          (if (local.get $verbose)
            (then
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.sub (i32.load align=4 (local.get $w)) (i32.const 1))))
              (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $xp)))
              (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
              (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $yp)))
              (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
              (call $printf (i32.const 1803) (global.get $@stack))))
          (local.set $w (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.add (i32.mul (local.get $yp) (i32.const 5)) (local.get $xp)) (i32.const 4)))))))
      (br_if $@block_2_continue (local.get $w)))
    (global.set $@stack (local.get $@stack_entry))
    (i32.const 0))
  (func $life_fin_prepare (param $cells i32) (param $X i32) (param $Y i32) (param $stat i32)
    (local $cnt i32)
    (local $hash i32)
    (local $y i32)
    (local $x i32)
    (local $idx i32)
    (local $dx i32)
    (local $dy i32)
    (local $didx i32)
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $y) (local.get $Y)))
        (block $@block_1_1_break
          (local.set $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $x) (local.get $X)))
            (local.set $idx (i32.add (i32.mul (local.get $X) (local.get $y)) (local.get $x)))
            (if (i32.eq (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $idx))) (i32.const 1))
              (then
                (local.set $cnt (i32.add (local.get $cnt) (i32.const 1)))
                (local.set $hash (i32.xor (local.get $hash) (i32.add (i32.mul (local.get $x) (global.get $rand_x)) (i32.mul (local.get $y) (global.get $rand_y)))))
                (block $@block_1_1_1_1_break
                  (local.set $dx (i32.const -1))
                  (loop $@block_1_1_1_1_continue
                    (br_if $@block_1_1_1_1_break (i32.gt_s (local.get $dx) (i32.const 1)))
                    (block $@block_1_1_1_1_1_break
                      (local.set $dy (i32.const -1))
                      (loop $@block_1_1_1_1_1_continue
                        (br_if $@block_1_1_1_1_1_break (i32.gt_s (local.get $dy) (i32.const 1)))
                        (local.set $didx (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (local.get $dy)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (local.get $dx)) (local.get $X)) (local.get $X))))
                        (if (i32.eqz (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $didx))))
                          (then
                            (i32.store8 align=1 (i32.add (local.get $cells) (local.get $didx)) (i32.const 2))))
                        (local.set $dy (i32.add (local.get $dy) (i32.const 1)))
                        (br $@block_1_1_1_1_1_continue)))
                    (local.set $dx (i32.add (local.get $dx) (i32.const 1)))
                    (br $@block_1_1_1_1_continue)))))
            (local.set $x (i32.add (local.get $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (local.set $y (i32.add (local.get $y) (i32.const 1)))
        (br $@block_1_continue)))
    (i32.store align=4 (i32.add (local.get $stat) (i32.const 4)) (local.get $cnt))
    (i32.store align=4 (local.get $stat) (local.get $hash)))
  (func $life_fin_step (param $cells i32) (param $cellsnew i32) (param $X i32) (param $Y i32) (param $stat i32)
    (local $ind i32)
    (local $x i32)
    (local $y i32)
    (local $n i32)
    (local $newv i32)
    (local $n00 i32)
    (local $n01 i32)
    (local $n02 i32)
    (local $n10 i32)
    (local $n12 i32)
    (local $n20 i32)
    (local $n21 i32)
    (local $n22 i32)
    (local $v00 i32)
    (local $v01 i32)
    (local $v02 i32)
    (local $v10 i32)
    (local $v11 i32)
    (local $v12 i32)
    (local $v20 i32)
    (local $v21 i32)
    (local $v22 i32)
    (local $cnt i32)
    (local $hash i32)
    (local $p i32)
    (local.set $p (i32.sub (local.get $cells) (i32.const 1)))
    (memory.fill (local.get $cellsnew) (i32.const 0) (i32.mul (local.get $X) (local.get $Y)))
    (block $@block_1_break
      (loop $@block_1_continue
        (loop $@block_1_1_continue
          (local.set $p (i32.add (local.get $p) (i32.const 1)))
          (br_if $@block_1_1_continue (i32.eqz (i32.load8_s align=1 (local.get $p)))))
        (br_if $@block_1_break (i32.eq (i32.load8_s align=1 (local.get $p)) (i32.const 3)))
        (local.set $ind (i32.sub (local.get $p) (local.get $cells)))
        (local.set $y (i32.div_s (local.get $ind) (local.get $X)))
        (local.set $x (i32.sub (local.get $ind) (i32.mul (local.get $y) (local.get $X))))
        (if (i32.and (i32.and (i32.and (i32.gt_s (local.get $x) (i32.const 0)) (i32.lt_s (local.get $x) (i32.sub (local.get $X) (i32.const 1)))) (i32.gt_s (local.get $y) (i32.const 0))) (i32.lt_s (local.get $y) (i32.sub (local.get $Y) (i32.const 1))))
          (then
            (local.set $n00 (i32.add (i32.mul (local.get $X) (i32.sub (local.get $y) (i32.const 1))) (i32.sub (local.get $x) (i32.const 1))))
            (local.set $n01 (i32.add (local.get $n00) (i32.const 1)))
            (local.set $n02 (i32.add (local.get $n01) (i32.const 1)))
            (local.set $n10 (i32.sub (local.get $ind) (i32.const 1)))
            (local.set $n12 (i32.add (local.get $ind) (i32.const 1)))
            (local.set $n20 (i32.add (local.get $n10) (local.get $X)))
            (local.set $n21 (i32.add (local.get $n20) (i32.const 1)))
            (local.set $n22 (i32.add (local.get $n21) (i32.const 1))))
          (else
            (local.set $n00 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (i32.const -1)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (i32.const -1)) (local.get $X)) (local.get $X))))
            (local.set $n01 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (i32.const -1)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (local.get $x) (local.get $X)) (local.get $X))))
            (local.set $n02 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (i32.const -1)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (i32.const 1)) (local.get $X)) (local.get $X))))
            (local.set $n10 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (local.get $y) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (i32.const -1)) (local.get $X)) (local.get $X))))
            (local.set $n12 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (local.get $y) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (i32.const 1)) (local.get $X)) (local.get $X))))
            (local.set $n20 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (i32.const 1)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (i32.const -1)) (local.get $X)) (local.get $X))))
            (local.set $n21 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (i32.const 1)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (local.get $x) (local.get $X)) (local.get $X))))
            (local.set $n22 (i32.add (i32.mul (local.get $X) (i32.rem_s (i32.add (i32.add (local.get $y) (i32.const 1)) (local.get $Y)) (local.get $Y))) (i32.rem_s (i32.add (i32.add (local.get $x) (i32.const 1)) (local.get $X)) (local.get $X))))))
        (local.set $v00 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n00)))))
        (local.set $v01 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n01)))))
        (local.set $v02 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n02)))))
        (local.set $v10 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n10)))))
        (local.set $v11 (i32.eq (i32.const 1) (i32.load8_s align=1 (local.get $p))))
        (local.set $v12 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n12)))))
        (local.set $v20 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n20)))))
        (local.set $v21 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n21)))))
        (local.set $v22 (i32.eq (i32.const 1) (i32.load8_s align=1 (i32.add (local.get $cells) (local.get $n22)))))
        (local.set $n (i32.add (i32.add (i32.add (i32.add (i32.add (i32.add (i32.add (local.get $v00) (local.get $v01)) (local.get $v02)) (local.get $v10)) (local.get $v12)) (local.get $v20)) (local.get $v21)) (local.get $v22)))
        (local.set $newv (i32.or (i32.eq (local.get $n) (i32.const 3)) (i32.and (i32.eq (local.get $n) (i32.const 2)) (local.get $v11))))
        (if (local.get $newv)
          (then
            (local.set $cnt (i32.add (local.get $cnt) (i32.const 1)))
            (local.set $hash (i32.xor (local.get $hash) (i32.add (i32.mul (local.get $x) (global.get $rand_x)) (i32.mul (local.get $y) (global.get $rand_y)))))
            (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $ind)) (local.get $newv))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n00))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n00)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n01))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n01)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n02))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n02)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n10))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n10)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n12))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n12)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n20))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n20)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n21))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n21)) (i32.const 2))))
            (if (i32.ne (i32.load8_s align=1 (i32.add (local.get $cellsnew) (local.get $n22))) (i32.const 1))
              (then
                (i32.store8 align=1 (i32.add (local.get $cellsnew) (local.get $n22)) (i32.const 2))))))
        (br $@block_1_continue)))
    (i32.store align=4 (i32.add (local.get $stat) (i32.const 4)) (local.get $cnt))
    (i32.store align=4 (local.get $stat) (local.get $hash)))
  (func $life_fin_print (param $pos i32) (param $X i32) (param $x0 i32) (param $x1 i32) (param $y0 i32) (param $y1 i32) (param $dbg i32)
    (local $@stack_entry i32)
    (local $y i32)
    (local $x i32)
    (local $val i32)
    (local.set $@stack_entry (global.get $@stack))
    (block $@block_1_break
      (local.set $y (local.get $y0))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.gt_s (local.get $y) (local.get $y1)))
        (block $@block_1_1_break
          (local.set $x (local.get $x0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.gt_s (local.get $x) (local.get $x1)))
            (local.set $val (i32.load8_s align=1 (i32.add (local.get $pos) (i32.add (i32.mul (local.get $X) (local.get $y)) (local.get $x)))))
            (call $printf (select (i32.const 2108) (select (i32.const 2110) (i32.const 2112) (i32.and (i32.eq (local.get $val) (i32.const 2)) (local.get $dbg))) (i32.eq (local.get $val) (i32.const 1))) (global.get $@stack))
            (local.set $x (i32.add (local.get $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (call $printf (i32.const 2114) (global.get $@stack))
        (local.set $y (i32.add (local.get $y) (i32.const 1)))
        (br $@block_1_continue)))
    (global.set $@stack (local.get $@stack_entry)))
  (func $life_fin_read (param $pos i32) (param $X i32) (param $Y i32) (param $x0 i32) (param $y0 i32) (param $src i32) (param $sX i32) (param $sY i32)
    (local $y i32)
    (local $x i32)
    (memory.fill (local.get $pos) (i32.const 0) (i32.mul (local.get $X) (local.get $Y)))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $y) (local.get $sY)))
        (block $@block_1_1_break
          (local.set $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $x) (local.get $sX)))
            (i32.store8 align=1 (i32.add (local.get $pos) (i32.add (i32.mul (i32.add (local.get $y) (local.get $y0)) (local.get $X)) (i32.add (local.get $x) (local.get $x0)))) (select (i32.const 1) (i32.const 0) (i32.eq (i32.load8_s align=1 (i32.add (local.get $src) (i32.add (i32.mul (local.get $y) (local.get $sX)) (local.get $x)))) (i32.const 120))))
            (local.set $x (i32.add (local.get $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (local.set $y (i32.add (local.get $y) (i32.const 1)))
        (br $@block_1_continue))))
  (func $life_prepare_box (param $w i32) (param $stat i32)
    (local $idx i32)
    (local $cnt i32)
    (local $idx@block_2_1 i32)
    (local $y i32)
    (local $x i32)
    (local $j i32)
    (local $vx i32)
    (local $vy i32)
    (local $ind i32)
    (if (i32.gt_s (i32.load align=4 (local.get $w)) (i32.const 0))
      (then
        (block $@block_1_1_break
          (local.set $idx (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $idx) (i32.const 25)))
            (if (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4))))
              (then
                (call $life_prepare_box (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))) (local.get $stat))))
            (local.set $idx (i32.add (local.get $idx) (i32.const 1)))
            (br $@block_1_1_continue))))
      (else
        (local.set $idx (i32.const 0))
        (block $@block_2_1_break
          (loop $@block_2_1_continue
            (br_if $@block_2_1_break (i32.ge_s (local.get $idx@block_2_1) (i32.const 25)))
            (if (i32.eq (i32.load8_s align=1 (i32.add (i32.add (local.get $w) (i32.const 20)) (local.get $idx@block_2_1))) (i32.const 1))
              (then
                (local.set $y (i32.div_s (local.get $idx@block_2_1) (i32.const 5)))
                (local.set $x (i32.rem_s (local.get $idx@block_2_1) (i32.const 5)))
                (local.set $cnt (i32.add (local.get $cnt) (i32.const 1)))
                (local.set $idx (i32.xor (local.get $idx) (i32.add (i32.mul (i32.add (local.get $x) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (global.get $rand_x)) (i32.mul (i32.add (local.get $y) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (global.get $rand_y)))))
                (block $@block_2_1_1_1_break
                  (local.set $j (i32.const 0))
                  (loop $@block_2_1_1_1_continue
                    (br_if $@block_2_1_1_1_break (i32.ge_s (local.get $j) (i32.const 9)))
                    (if (i32.eq (local.get $j) (i32.const 4))
                      (then
                        (local.set $j (i32.add (local.get $j) (i32.const 1)))
                        (br $@block_2_1_1_1_continue)))
                    (local.set $vx (i32.sub (i32.add (local.get $x) (i32.rem_s (local.get $j) (i32.const 3))) (i32.const 1)))
                    (local.set $vy (i32.sub (i32.add (local.get $y) (i32.div_s (local.get $j) (i32.const 3))) (i32.const 1)))
                    (if (block $@block_2_1_1_1_1_break (result i32) (drop (br_if $@block_2_1_1_1_1_break (i32.const 0) (i32.gt_s (i32.const 0) (local.get $vx)))) (drop (br_if $@block_2_1_1_1_1_break (i32.const 0) (i32.ge_s (local.get $vx) (i32.const 5)))) (drop (br_if $@block_2_1_1_1_1_break (i32.const 0) (i32.gt_s (i32.const 0) (local.get $vy)))) (drop (br_if $@block_2_1_1_1_1_break (i32.const 0) (i32.ge_s (local.get $vy) (i32.const 5)))) (i32.const 1))
                      (then
                        (local.set $ind (i32.add (i32.mul (local.get $vy) (i32.const 5)) (local.get $vx)))
                        (if (i32.eqz (i32.load8_s align=1 (i32.add (i32.add (local.get $w) (i32.const 20)) (local.get $ind))))
                          (then
                            (i32.store8 align=1 (i32.add (i32.add (local.get $w) (i32.const 20)) (local.get $ind)) (i32.const 2)))))
                      (else
                        (if (i32.eqz (call $get_cell (i32.add (local.get $vx) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (i32.add (local.get $vy) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (i32.const 0)))
                          (then
                            (call $set_cell (i32.add (local.get $vx) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (i32.add (local.get $vy) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (i32.const 2) (i32.const 0) (i32.const 0))))))
                    (local.set $j (i32.add (local.get $j) (i32.const 1)))
                    (br $@block_2_1_1_1_continue)))))
            (local.set $idx@block_2_1 (i32.add (local.get $idx@block_2_1) (i32.const 1)))
            (br $@block_2_1_continue)))
        (i32.store align=4 (local.get $stat) (i32.xor (i32.load align=4 (local.get $stat)) (local.get $idx)))
        (i32.store align=4 (i32.add (local.get $stat) (i32.const 4)) (i32.add (i32.load align=4 (i32.add (local.get $stat) (i32.const 4))) (local.get $cnt))))))
  (func $life_step_box (param $w i32) (param $dst i32) (param $age i32) (param $stat i32)
    (local $@stack_entry i32)
    (local $idx i32)
    (local $cnt i32)
    (local $start i32)
    (local $end i32)
    (local $p i32)
    (local $idx@block_3_1 i32)
    (local $y i32)
    (local $x i32)
    (local $n i32)
    (local $j i32)
    (local $vx i32)
    (local $vy i32)
    (local $vy@block_3_1_2_1 i32)
    (local $xd i32)
    (local.set $@stack_entry (global.get $@stack))
    (if (i32.eqz (local.get $w))
      (then
        (i64.store align=8 (global.get $@stack) (i64.const 448))
        (call $printf (i32.const 2116) (global.get $@stack))
        (unreachable)))
    (if (i32.gt_s (i32.load align=4 (local.get $w)) (i32.const 0))
      (then
        (block $@block_2_1_break
          (local.set $idx (i32.const 0))
          (loop $@block_2_1_continue
            (br_if $@block_2_1_break (i32.ge_s (local.get $idx) (i32.const 25)))
            (if (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4))))
              (then
                (if (i32.ge_s (i32.load align=4 (i32.add (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))) (i32.const 16))) (i32.sub (local.get $age) (i32.const 1)))
                  (then
                    (call $life_step_box (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))) (local.get $dst) (local.get $age) (local.get $stat))
                    (if (i32.eq (i32.load align=4 (i32.add (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))) (i32.const 16))) (local.get $age))
                      (then
                        (i32.store align=4 (i32.add (local.get $w) (i32.const 16)) (local.get $age)))))
                  (else
                    (if (i32.lt_s (i32.load align=4 (i32.add (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))) (i32.const 16))) (i32.sub (local.get $age) (i32.const 3)))
                      (then
                        (call $release_box (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))))
                        (i32.store align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4))) (i32.const 0))))))))
            (local.set $idx (i32.add (local.get $idx) (i32.const 1)))
            (br $@block_2_1_continue))))
      (else
        (local.set $idx (i32.const 0))
        (local.set $start (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.const 25) (i32.sub (i32.const 1) (local.get $dst)))))
        (local.set $end (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.const 25) (i32.sub (i32.const 2) (local.get $dst)))))
        (block $@block_3_1_break
          (local.set $p (local.get $start))
          (loop $@block_3_1_continue
            (br_if $@block_3_1_break (i32.ge_s (local.get $p) (local.get $end)))
            (if (i32.eqz (i32.load8_s align=1 (local.get $p)))
              (then
                (local.set $p (i32.add (local.get $p) (i32.const 1)))
                (br $@block_3_1_continue)))
            (local.set $idx@block_3_1 (i32.sub (local.get $p) (local.get $start)))
            (local.set $y (i32.div_s (local.get $idx@block_3_1) (i32.const 5)))
            (local.set $x (i32.rem_s (local.get $idx@block_3_1) (i32.const 5)))
            (local.set $n (i32.const 0))
            (block $@block_3_1_1_break
              (local.set $j (i32.const 0))
              (loop $@block_3_1_1_continue
                (br_if $@block_3_1_1_break (i32.ge_s (local.get $j) (i32.const 9)))
                (if (i32.eq (local.get $j) (i32.const 4))
                  (then
                    (local.set $j (i32.add (local.get $j) (i32.const 1)))
                    (br $@block_3_1_1_continue)))
                (local.set $vx (i32.sub (i32.add (local.get $x) (i32.rem_s (local.get $j) (i32.const 3))) (i32.const 1)))
                (local.set $vy (i32.sub (i32.add (local.get $y) (i32.div_s (local.get $j) (i32.const 3))) (i32.const 1)))
                (local.set $n (i32.add (local.get $n) (i32.eq (i32.const 1) (if (result i32) (block $@block_3_1_1_1_break (result i32) (drop (br_if $@block_3_1_1_1_break (i32.const 0) (i32.gt_s (i32.const 0) (local.get $vx)))) (drop (br_if $@block_3_1_1_1_break (i32.const 0) (i32.ge_s (local.get $vx) (i32.const 5)))) (drop (br_if $@block_3_1_1_1_break (i32.const 0) (i32.gt_s (i32.const 0) (local.get $vy)))) (drop (br_if $@block_3_1_1_1_break (i32.const 0) (i32.ge_s (local.get $vy) (i32.const 5)))) (i32.const 1)) (then (i32.load8_s align=1 (i32.add (local.get $start) (i32.add (i32.mul (local.get $vy) (i32.const 5)) (local.get $vx))))) (else (call $get_cell (i32.add (local.get $vx) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (i32.add (local.get $vy) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (i32.sub (i32.const 1) (local.get $dst))))))))
                (local.set $j (i32.add (local.get $j) (i32.const 1)))
                (br $@block_3_1_1_continue)))
            (if (i32.or (i32.eq (local.get $n) (i32.const 3)) (i32.and (i32.eq (local.get $n) (i32.const 2)) (i32.eq (i32.load8_s align=1 (local.get $p)) (i32.const 1))))
              (then
                (local.set $cnt (i32.add (local.get $cnt) (i32.const 1)))
                (if (i32.eq (local.get $cnt) (i32.const 1))
                  (then
                    (i32.store align=4 (i32.add (local.get $w) (i32.const 16)) (local.get $age))))
                (local.set $idx (i32.xor (local.get $idx) (i32.add (i32.mul (i32.add (local.get $x) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (global.get $rand_x)) (i32.mul (i32.add (local.get $y) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (global.get $rand_y)))))
                (local.set $j (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.const 25) (local.get $dst))))
                (i32.store8 align=1 (i32.add (local.get $j) (local.get $idx@block_3_1)) (i32.const 1))
                (block $@block_3_1_2_1_break
                  (local.set $vx (i32.const 0))
                  (loop $@block_3_1_2_1_continue
                    (br_if $@block_3_1_2_1_break (i32.ge_s (local.get $vx) (i32.const 9)))
                    (if (i32.eq (local.get $vx) (i32.const 4))
                      (then
                        (local.set $vx (i32.add (local.get $vx) (i32.const 1)))
                        (br $@block_3_1_2_1_continue)))
                    (local.set $vy (i32.sub (i32.add (local.get $x) (i32.rem_s (local.get $vx) (i32.const 3))) (i32.const 1)))
                    (local.set $vy@block_3_1_2_1 (i32.sub (i32.add (local.get $y) (i32.div_s (local.get $vx) (i32.const 3))) (i32.const 1)))
                    (if (block $@block_3_1_2_1_1_break (result i32) (drop (br_if $@block_3_1_2_1_1_break (i32.const 0) (i32.gt_s (i32.const 0) (local.get $vy)))) (drop (br_if $@block_3_1_2_1_1_break (i32.const 0) (i32.ge_s (local.get $vy) (i32.const 5)))) (drop (br_if $@block_3_1_2_1_1_break (i32.const 0) (i32.gt_s (i32.const 0) (local.get $vy@block_3_1_2_1)))) (drop (br_if $@block_3_1_2_1_1_break (i32.const 0) (i32.ge_s (local.get $vy@block_3_1_2_1) (i32.const 5)))) (i32.const 1))
                      (then
                        (local.set $xd (i32.add (i32.add (local.get $j) (i32.mul (local.get $vy@block_3_1_2_1) (i32.const 5))) (local.get $vy)))
                        (if (i32.ne (i32.load8_s align=1 (local.get $xd)) (i32.const 1))
                          (then
                            (i32.store8 align=1 (local.get $xd) (i32.const 2)))))
                      (else
                        (if (i32.ne (i32.const 1) (call $get_cell (i32.add (local.get $vy) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (i32.add (local.get $vy@block_3_1_2_1) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (local.get $dst)))
                          (then
                            (call $set_cell (i32.add (local.get $vy) (i32.load align=4 (i32.add (local.get $w) (i32.const 4)))) (i32.add (local.get $vy@block_3_1_2_1) (i32.load align=4 (i32.add (local.get $w) (i32.const 8)))) (i32.const 2) (local.get $dst) (local.get $age))))))
                    (local.set $vx (i32.add (local.get $vx) (i32.const 1)))
                    (br $@block_3_1_2_1_continue)))))
            (local.set $p (i32.add (local.get $p) (i32.const 1)))
            (br $@block_3_1_continue)))
        (i32.store align=4 (local.get $stat) (i32.xor (i32.load align=4 (local.get $stat)) (local.get $idx)))
        (i32.store align=4 (i32.add (local.get $stat) (i32.const 4)) (i32.add (i32.load align=4 (i32.add (local.get $stat) (i32.const 4))) (local.get $cnt)))))
    (global.set $@stack (local.get $@stack_entry)))
  (func $life_clean_plane (param $w i32) (param $dst i32)
    (local $@stack_entry i32)
    (local $idx i32)
    (local.set $@stack_entry (global.get $@stack))
    (if (i32.eqz (local.get $w))
      (then
        (i64.store align=8 (global.get $@stack) (i64.const 513))
        (call $printf (i32.const 2116) (global.get $@stack))
        (unreachable)))
    (if (i32.gt_s (i32.load align=4 (local.get $w)) (i32.const 0))
      (then
        (block $@block_2_1_break
          (loop $@block_2_1_continue
            (br_if $@block_2_1_break (i32.ge_s (local.get $idx) (i32.const 25)))
            (if (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4))))
              (then
                (call $life_clean_plane (i32.load align=4 (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (local.get $idx) (i32.const 4)))) (local.get $dst))))
            (local.set $idx (i32.add (local.get $idx) (i32.const 1)))
            (br $@block_2_1_continue))))
      (else
        (memory.fill (i32.add (i32.add (local.get $w) (i32.const 20)) (i32.mul (i32.const 25) (local.get $dst))) (i32.const 0) (i32.const 25))))
    (global.set $@stack (local.get $@stack_entry)))
  (func $life_prepare (param $stat i32)
    (if (global.get $world)
      (then
        (i32.store align=4 (i32.add (local.get $stat) (i32.const 4)) (i32.const 0))
        (i32.store align=4 (local.get $stat) (i32.const 0))
        (call $life_prepare_box (global.get $world) (local.get $stat)))))
  (func $life_step (param $dst i32) (param $age i32) (param $stat i32)
    (if (global.get $world)
      (then
        (i32.store align=4 (i32.add (local.get $stat) (i32.const 4)) (i32.const 0))
        (i32.store align=4 (local.get $stat) (i32.const 0))
        (call $life_clean_plane (global.get $world) (local.get $dst))
        (call $life_step_box (global.get $world) (local.get $dst) (local.get $age) (local.get $stat)))))
  (func $life_infin_read (param $X i32) (param $Y i32) (param $x0 i32) (param $y0 i32) (param $src i32) (param $sX i32) (param $sY i32)
    (local $y i32)
    (local $x i32)
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $y) (local.get $sY)))
        (block $@block_1_1_break
          (local.set $x (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $x) (local.get $sX)))
            (call $set_cell (i32.add (local.get $x) (local.get $x0)) (i32.add (local.get $y) (local.get $y0)) (i32.eq (i32.load8_s align=1 (i32.add (local.get $src) (i32.add (i32.mul (local.get $y) (local.get $sX)) (local.get $x)))) (i32.const 120)) (i32.const 0) (i32.const 0))
            (local.set $x (i32.add (local.get $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (local.set $y (i32.add (local.get $y) (i32.const 1)))
        (br $@block_1_continue))))
  (func $life_infin_print (param $x0 i32) (param $x1 i32) (param $y0 i32) (param $y1 i32) (param $plane i32) (param $dbg i32)
    (local $@stack_entry i32)
    (local $y i32)
    (local $x i32)
    (local $val i32)
    (local.set $@stack_entry (global.get $@stack))
    (block $@block_1_break
      (local.set $y (local.get $y0))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.gt_s (local.get $y) (local.get $y1)))
        (block $@block_1_1_break
          (local.set $x (local.get $x0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.gt_s (local.get $x) (local.get $x1)))
            (local.set $val (call $get_cell (local.get $x) (local.get $y) (local.get $plane)))
            (call $printf (select (i32.const 2108) (select (i32.const 2110) (i32.const 2112) (i32.and (i32.eq (local.get $val) (i32.const 2)) (local.get $dbg))) (i32.eq (local.get $val) (i32.const 1))) (global.get $@stack))
            (local.set $x (i32.add (local.get $x) (i32.const 1)))
            (br $@block_1_1_continue)))
        (call $printf (i32.const 2114) (global.get $@stack))
        (local.set $y (i32.add (local.get $y) (i32.const 1)))
        (br $@block_1_continue)))
    (global.set $@stack (local.get $@stack_entry)))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $X i32)
    (local $Y i32)
    (local $pos_0 i32)
    (local $pos_1 i32)
    (local $initial_pos i32)
    (local $sX i32)
    (local $sY i32)
    (local $x i32)
    (local $y i32)
    (local $iter i32)
    (local $ok i32)
    (local $hash i32)
    (local $i i32)
    (local $j i32)
    (local $x@block_5_4 i32)
    (local $y@block_5_4_1 i32)
    (local $i@block_5_4_1_1 i32)
    (local $xwin i32)
    (local $ywin i32)
    (local $x0 i32)
    (local $x1 i32)
    (local $y0 i32)
    (local $y1 i32)
    (local.set $@stack_entry (global.get $@stack))
    (local.set $X (i32.const 500))
    (local.set $Y (i32.const 500))
    (local.set $pos_0 (i32.const 2672))
    (local.set $pos_1 (i32.add (i32.const 2672) (i32.add (i32.mul (local.get $X) (local.get $Y)) (i32.const 1))))
    (call $mm_init (i32.mul (i32.const 2) (i32.add (i32.mul (local.get $X) (local.get $Y)) (i32.const 1))) (call $__max_32s (i32.const 70) (i32.const 120)))
    (local.set $initial_pos (i32.const 2149))
    (local.set $sX (i32.const 9))
    (local.set $sY (i32.const 5))
    (if (i32.ne (i32.mul (local.get $sX) (local.get $sY)) (call $strlen (local.get $initial_pos)))
      (then
        (i64.store align=8 (global.get $@stack) (i64.const 595))
        (call $printf (i32.const 2195) (global.get $@stack))
        (unreachable)))
    (call $life_infin_read (local.get $X) (local.get $Y) (i32.div_s (i32.sub (local.get $X) (local.get $sX)) (i32.const 2)) (i32.div_s (i32.sub (local.get $Y) (local.get $sY)) (i32.const 2)) (local.get $initial_pos) (local.get $sX) (local.get $sY))
    (memory.fill (local.get $pos_0) (i32.const 0) (i32.mul (local.get $X) (local.get $Y)))
    (memory.fill (local.get $pos_1) (i32.const 0) (i32.mul (local.get $X) (local.get $Y)))
    (i32.store8 align=1 (i32.add (local.get $pos_0) (i32.mul (local.get $X) (local.get $Y))) (i32.const 3))
    (i32.store8 align=1 (i32.add (local.get $pos_1) (i32.mul (local.get $X) (local.get $Y))) (i32.const 3))
    (call $life_fin_read (local.get $pos_0) (local.get $X) (local.get $Y) (i32.div_s (i32.sub (local.get $X) (local.get $sX)) (i32.const 2)) (i32.div_s (i32.sub (local.get $Y) (local.get $sY)) (i32.const 2)) (local.get $initial_pos) (local.get $sX) (local.get $sY))
    (block $@block_2_break
      (local.set $x (i32.const 0))
      (loop $@block_2_continue
        (br_if $@block_2_break (i32.ge_s (local.get $x) (local.get $X)))
        (block $@block_2_1_break
          (local.set $y (i32.const 0))
          (loop $@block_2_1_continue
            (br_if $@block_2_1_break (i32.ge_s (local.get $y) (local.get $Y)))
            (if (i32.ne (call $get_cell (local.get $x) (local.get $y) (i32.const 0)) (i32.load8_s align=1 (i32.add (local.get $pos_0) (i32.add (i32.mul (local.get $y) (local.get $X)) (local.get $x)))))
              (then
                (i64.store align=8 (global.get $@stack) (i64.const 609))
                (call $printf (i32.const 2257) (global.get $@stack))
                (unreachable)))
            (local.set $y (i32.add (local.get $y) (i32.const 1)))
            (br $@block_2_1_continue)))
        (local.set $x (i32.add (local.get $x) (i32.const 1)))
        (br $@block_2_continue)))
    (local.set $x (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 8)) (i32.const 1)) (i32.const 8)))))
    (local.set $y (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 8)) (i32.const 1)) (i32.const 8)))))
    (call $life_fin_prepare (local.get $pos_0) (local.get $X) (local.get $Y) (local.get $x))
    (call $life_prepare (local.get $y))
    (if (i32.ne (i32.load align=4 (i32.add (local.get $x) (i32.const 4))) (i32.load align=4 (i32.add (local.get $y) (i32.const 4))))
      (then
        (i64.store align=8 (global.get $@stack) (i64.const 614))
        (call $printf (i32.const 2322) (global.get $@stack))
        (unreachable)))
    (if (i32.ne (i32.load align=4 (local.get $x)) (i32.load align=4 (local.get $y)))
      (then
        (i64.store align=8 (global.get $@stack) (i64.const 615))
        (call $printf (i32.const 2382) (global.get $@stack))
        (unreachable)))
    (local.set $ok (i32.const 1))
    (local.set $hash (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 16)) (i32.const 1)) (i32.const 8)))))
    (i32.store align=4 (i32.add (local.get $hash) (i32.const 12)) (i32.load align=4 (local.get $y)))
    (block $@block_5_break
      (local.set $iter (i32.const 0))
      (loop $@block_5_continue
        (br_if $@block_5_break (i32.eqz (if (result i32) (i32.ge_s (local.get $iter) (i32.const 10000)) (then (i32.const 0)) (else (i32.ne (local.get $ok) (i32.const 0))))))
        (local.set $i (i32.rem_s (local.get $iter) (i32.const 2)))
        (call $life_fin_step (select (local.get $pos_1) (local.get $pos_0) (local.get $i)) (select (local.get $pos_0) (local.get $pos_1) (local.get $i)) (local.get $X) (local.get $Y) (local.get $x))
        (call $life_step (i32.sub (i32.const 1) (local.get $i)) (i32.add (local.get $iter) (i32.const 1)) (local.get $y))
        (block $@block_5_1_break
          (local.set $j (i32.const 0))
          (loop $@block_5_1_continue
            (br_if $@block_5_1_break (i32.eqz (if (result i32) (i32.ge_s (local.get $j) (i32.const 4)) (then (i32.const 0)) (else (i32.ne (i32.ne (i32.load align=4 (i32.add (local.get $hash) (i32.mul (local.get $j) (i32.const 4)))) (i32.load align=4 (local.get $y))) (i32.const 0))))))
            (local.set $j (i32.add (local.get $j) (i32.const 1)))
            (br $@block_5_1_continue)))
        (if (i32.lt_s (local.get $j) (i32.const 4))
          (then
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $iter)))
            (call $printf (i32.const 2440) (global.get $@stack))
            (br $@block_5_break)))
        (block $@block_5_3_break
          (local.set $j (i32.const 0))
          (loop $@block_5_3_continue
            (br_if $@block_5_3_break (i32.ge_s (local.get $j) (i32.const 4)))
            (i32.store align=4 (i32.add (local.get $hash) (i32.mul (local.get $j) (i32.const 4))) (select (i32.load align=4 (i32.add (local.get $hash) (i32.mul (i32.add (local.get $j) (i32.const 1)) (i32.const 4)))) (i32.load align=4 (local.get $y)) (i32.lt_s (local.get $j) (i32.const 3))))
            (local.set $j (i32.add (local.get $j) (i32.const 1)))
            (br $@block_5_3_continue)))
        (block $@block_5_4_break
          (local.set $x@block_5_4 (i32.const 0))
          (loop $@block_5_4_continue
            (br_if $@block_5_4_break (i32.eqz (if (result i32) (i32.ge_s (local.get $x@block_5_4) (local.get $X)) (then (i32.const 0)) (else (i32.ne (local.get $ok) (i32.const 0))))))
            (block $@block_5_4_1_break
              (local.set $y@block_5_4_1 (i32.const 0))
              (loop $@block_5_4_1_continue
                (br_if $@block_5_4_1_break (i32.eqz (if (result i32) (i32.ge_s (local.get $y@block_5_4_1) (local.get $Y)) (then (i32.const 0)) (else (i32.ne (local.get $ok) (i32.const 0))))))
                (local.set $ok (i32.eq (call $get_cell (local.get $x@block_5_4) (local.get $y@block_5_4_1) (i32.sub (i32.const 1) (local.get $i))) (i32.load8_s align=1 (i32.add (select (local.get $pos_0) (local.get $pos_1) (local.get $i)) (i32.add (i32.mul (local.get $y@block_5_4_1) (local.get $X)) (local.get $x@block_5_4))))))
                (if (i32.eqz (local.get $ok))
                  (then
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x@block_5_4)))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y@block_5_4_1)))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load8_s align=1 (i32.add (select (local.get $pos_0) (local.get $pos_1) (local.get $i)) (i32.add (i32.mul (local.get $y@block_5_4_1) (local.get $X)) (local.get $x@block_5_4))))))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (call $get_cell (local.get $x@block_5_4) (local.get $y@block_5_4_1) (i32.sub (i32.const 1) (local.get $i)))))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
                    (call $printf (i32.const 2469) (global.get $@stack))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $iter)))
                    (call $printf (i32.const 2494) (global.get $@stack))
                    (local.set $i@block_5_4_1_1 (i32.rem_s (local.get $iter) (i32.const 2)))
                    (local.set $xwin (i32.const 40))
                    (local.set $ywin (i32.const 10))
                    (local.set $x0 (i32.sub (local.get $x@block_5_4) (i32.div_s (local.get $xwin) (i32.const 2))))
                    (local.set $x1 (i32.sub (i32.add (local.get $x0) (local.get $xwin)) (i32.const 1)))
                    (if (i32.lt_s (local.get $x0) (i32.const 0))
                      (then
                        (local.set $x1 (i32.add (local.get $x1) (i32.sub (i32.const 0) (local.get $x0))))
                        (local.set $x0 (i32.const 0))))
                    (if (i32.gt_s (local.get $x1) (i32.sub (local.get $X) (i32.const 1)))
                      (then
                        (local.set $x1 (i32.sub (local.get $X) (i32.const 1)))))
                    (local.set $y0 (i32.sub (local.get $y@block_5_4_1) (i32.div_s (local.get $ywin) (i32.const 2))))
                    (local.set $y1 (i32.sub (i32.add (local.get $y0) (local.get $ywin)) (i32.const 1)))
                    (if (i32.lt_s (local.get $y0) (i32.const 0))
                      (then
                        (local.set $y1 (i32.add (local.get $y1) (i32.sub (i32.const 0) (local.get $y0))))
                        (local.set $y0 (i32.const 0))))
                    (if (i32.gt_s (local.get $y1) (i32.sub (local.get $Y) (i32.const 1)))
                      (then
                        (local.set $y1 (i32.sub (local.get $Y) (i32.const 1)))))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x0)))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $x1)))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y0)))
                    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
                    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $y1)))
                    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 24)))
                    (call $printf (i32.const 2534) (global.get $@stack))
                    (call $printf (i32.const 2579) (global.get $@stack))
                    (call $life_fin_print (select (local.get $pos_0) (local.get $pos_1) (local.get $i@block_5_4_1_1)) (local.get $X) (local.get $x0) (local.get $x1) (local.get $y0) (local.get $y1) (i32.const 1))
                    (call $printf (i32.const 2591) (global.get $@stack))
                    (call $life_infin_print (local.get $x0) (local.get $x1) (local.get $y0) (local.get $y1) (i32.sub (i32.const 1) (local.get $i@block_5_4_1_1)) (i32.const 1))))
                (local.set $y@block_5_4_1 (i32.add (local.get $y@block_5_4_1) (i32.const 1)))
                (br $@block_5_4_1_continue)))
            (local.set $x@block_5_4 (i32.add (local.get $x@block_5_4) (i32.const 1)))
            (br $@block_5_4_continue)))
        (if (i32.ne (i32.load align=4 (i32.add (local.get $x) (i32.const 4))) (i32.load align=4 (i32.add (local.get $y) (i32.const 4))))
          (then
            (i64.store align=8 (global.get $@stack) (i64.const 671))
            (call $printf (i32.const 2322) (global.get $@stack))
            (unreachable)))
        (if (i32.ne (i32.load align=4 (local.get $x)) (i32.load align=4 (local.get $y)))
          (then
            (i64.store align=8 (global.get $@stack) (i64.const 672))
            (call $printf (i32.const 2382) (global.get $@stack))
            (unreachable)))
        (local.set $iter (i32.add (local.get $iter) (i32.const 1)))
        (br $@block_5_continue)))
    (if (local.get $ok)
      (then
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $iter)))
        (call $printf (i32.const 2605) (global.get $@stack))))
    (local.set $i (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $j (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $x@block_5_4 (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $y@block_5_4_1 (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $i@block_5_4_1_1 (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (call $mm_stat (local.get $i) (local.get $j) (local.get $x@block_5_4) (local.get $y@block_5_4_1) (local.get $i@block_5_4_1_1))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $i))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $j))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $x@block_5_4))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $y@block_5_4_1))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $i@block_5_4_1_1))))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 32)))
    (call $printf (i32.const 2643) (global.get $@stack))
    (global.set $@stack (local.get $@stack_entry))
    (i32.const 0))
  (func $mm_init (param $extra_offset i32) (param $size i32)
    (if (block $@block_1_break (result i32) (drop (br_if $@block_1_break (i32.const 1) (i32.lt_s (local.get $extra_offset) (i32.const 0)))) (drop (br_if $@block_1_break (i32.const 1) (i32.lt_s (local.get $size) (i32.const 1)))) (drop (br_if $@block_1_break (i32.const 1) (global.get $__mm_start))) (i32.const 0))
      (then
        (unreachable)))
    (global.set $__mm_extra_offset (local.get $extra_offset))
    (global.set $__mm_size (i32.add (i32.mul (i32.div_s (i32.sub (local.get $size) (i32.const 1)) (i32.const 8)) (i32.const 8)) (i32.const 8)))
    (if (if (result i32) (i32.eqz (i32.const 1)) (then (i32.const 0)) (else (i32.ne (i32.gt_s (i32.rem_s (i32.add (i32.const 2672) (global.get $__mm_extra_offset)) (i32.const 8)) (i32.const 0)) (i32.const 0))))
      (then
        (global.set $__mm_extra_offset (i32.add (global.get $__mm_extra_offset) (i32.sub (i32.const 8) (i32.rem_s (i32.add (i32.const 2672) (global.get $__mm_extra_offset)) (i32.const 8)))))))
    (global.set $__mm_start (i32.add (i32.const 2672) (global.get $__mm_extra_offset))))
  (func $malloc (param $size i32) (result i32)
    (local $unit_size i32)
    (local $required i32)
    (local $j i32)
    (local $result i32)
    (global.set $__mm_stat_allocated (i32.add (global.get $__mm_stat_allocated) (i32.const 1)))
    (if (i32.eqz (global.get $__mm_start))
      (then
        (call $mm_init (i32.const 0) (local.get $size))))
    (if (i32.gt_s (local.get $size) (global.get $__mm_size))
      (then
        (unreachable)))
    (local.set $unit_size (i32.add (i32.const 1) (i32.mul (i32.const 8) (global.get $__mm_size))))
    (if (if (result i32) (i32.ge_s (global.get $__mm_first) (i32.const 0)) (then (i32.const 0)) (else (i32.ne (i32.eq (global.get $__mm_inuse) (global.get $__mm_capacity)) (i32.const 0))))
      (then
        (local.set $required (i32.add (i32.div_s (i32.add (i32.add (i32.const 2672) (global.get $__mm_extra_offset)) (i32.mul (i32.mul (i32.add (global.get $__mm_capacity) (global.get $__mm_expand_by)) (i32.const 8)) (local.get $unit_size))) (i32.const 64000)) (i32.const 1)))
        (if (i32.gt_s (local.get $required) (memory.size))
          (then
            (drop (memory.grow (i32.sub (local.get $required) (memory.size))))))
        (global.set $__mm_capacity (i32.add (global.get $__mm_capacity) (global.get $__mm_expand_by)))))
    (if (i32.lt_s (global.get $__mm_first) (i32.const 0))
      (then
        (if (i32.ge_s (global.get $__mm_inuse) (global.get $__mm_capacity))
          (then
            (unreachable)))
        (i64.store align=8 (i32.add (global.get $__mm_start) (i32.mul (i32.mul (global.get $__mm_inuse) (local.get $unit_size)) (i32.const 8))) (i64.const -1))
        (global.set $__mm_first (global.get $__mm_inuse))
        (global.set $__mm_inuse (i32.add (global.get $__mm_inuse) (i32.const 1)))))
    (if (i32.lt_s (global.get $__mm_first) (i32.const 0))
      (then
        (unreachable)))
    (local.set $required (i32.add (global.get $__mm_start) (i32.mul (i32.mul (global.get $__mm_first) (local.get $unit_size)) (i32.const 8))))
    (if (i64.eq (i64.load align=8 (local.get $required)) (i64.const 0))
      (then
        (unreachable)))
    (local.set $j (i32.wrap_i64 (i64.ctz (i64.load align=8 (local.get $required)))))
    (i64.store align=8 (local.get $required) (i64.xor (i64.load align=8 (local.get $required)) (i64.shl (i64.const 1) (i64.extend_i32_s (local.get $j)))))
    (local.set $result (i32.add (i32.add (local.get $required) (i32.const 8)) (i32.mul (local.get $j) (global.get $__mm_size))))
    (if (i64.eqz (i64.load align=8 (local.get $required)))
      (then
        (loop $@block_3_1_continue
          (global.set $__mm_first (i32.add (global.get $__mm_first) (i32.const 1)))
          (br_if $@block_3_1_continue (if (result i32) (i32.ge_s (global.get $__mm_first) (global.get $__mm_inuse)) (then (i32.const 0)) (else (i32.ne (i64.eqz (i64.load align=8 (i32.add (global.get $__mm_start) (i32.mul (i32.mul (global.get $__mm_first) (local.get $unit_size)) (i32.const 8))))) (i32.const 0))))))
        (if (i32.eq (global.get $__mm_first) (global.get $__mm_inuse))
          (then
            (global.set $__mm_first (i32.const -1))))))
    (local.get $result))
  (func $free (param $box i32)
    (local $unit_size i32)
    (local $offset i32)
    (local $idx i32)
    (local $cur i32)
    (local $j i32)
    (global.set $__mm_stat_freed (i32.add (global.get $__mm_stat_freed) (i32.const 1)))
    (local.set $unit_size (i32.add (i32.const 1) (i32.mul (i32.const 8) (global.get $__mm_size))))
    (local.set $offset (i32.sub (local.get $box) (global.get $__mm_start)))
    (local.set $idx (i32.div_s (i32.div_s (local.get $offset) (local.get $unit_size)) (i32.const 8)))
    (local.set $cur (i32.add (global.get $__mm_start) (i32.mul (i32.mul (local.get $idx) (local.get $unit_size)) (i32.const 8))))
    (local.set $j (i32.div_s (i32.sub (i32.sub (local.get $box) (local.get $cur)) (i32.const 8)) (global.get $__mm_size)))
    (if (i32.lt_s (local.get $j) (i32.const 0))
      (then
        (unreachable)))
    (if (i32.ge_s (local.get $j) (i32.const 64))
      (then
        (unreachable)))
    (if (i32.ne (local.get $box) (i32.add (i32.add (local.get $cur) (i32.const 8)) (i32.mul (local.get $j) (global.get $__mm_size))))
      (then
        (unreachable)))
    (if (i32.wrap_i64 (i64.and (i64.load align=8 (local.get $cur)) (i64.shl (i64.const 1) (i64.extend_i32_s (local.get $j)))))
      (then
        (unreachable)))
    (i64.store align=8 (local.get $cur) (i64.xor (i64.load align=8 (local.get $cur)) (i64.shl (i64.const 1) (i64.extend_i32_s (local.get $j)))))
    (if (i32.lt_s (local.get $idx) (global.get $__mm_first))
      (then
        (global.set $__mm_first (local.get $idx)))))
  (func $__mm_count_boxes (result i32)
    (local $unit_size i32)
    (local $res i32)
    (local $i i32)
    (local.set $unit_size (i32.add (i32.const 1) (i32.mul (i32.const 8) (global.get $__mm_size))))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $i) (global.get $__mm_inuse)))
        (local.set $res (i32.add (local.get $res) (i32.sub (i32.const 64) (i32.wrap_i64 (i64.popcnt (i64.load align=8 (i32.add (global.get $__mm_start) (i32.mul (i32.mul (local.get $i) (local.get $unit_size)) (i32.const 8)))))))))
        (local.set $i (i32.add (local.get $i) (i32.const 1)))
        (br $@block_1_continue)))
    (local.get $res))
  (func $mm_stat (param $allocated i32) (param $freed i32) (param $current i32) (param $in_use i32) (param $capacity i32)
    (i32.store align=4 (local.get $allocated) (global.get $__mm_stat_allocated))
    (i32.store align=4 (local.get $freed) (global.get $__mm_stat_freed))
    (i32.store align=4 (local.get $current) (call $__mm_count_boxes))
    (i32.store align=4 (local.get $in_use) (global.get $__mm_inuse))
    (i32.store align=4 (local.get $capacity) (global.get $__mm_capacity)))
  (func $strlen (param $str i32) (result i32)
    (local $n i32)
    (loop $@block_1_continue
      (local.set $str (i32.add (local.get $str) (i32.const 1)))
      (local.set $n (i32.add (local.get $n) (i32.const 1)))
      (br_if $@block_1_continue (i32.load8_s align=1 (local.get $str))))
    (local.get $n))
  (func $__max_32s (param $a i32) (param $b i32) (result i32)
    (select (local.get $a) (local.get $b) (i32.gt_s (local.get $a) (local.get $b)))))
