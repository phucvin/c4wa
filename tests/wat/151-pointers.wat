(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $@stack (mut i32) (i32.const 8))
  (global $N i32 (i32.const 100))
  (memory (export "memory") 1)
  (data (i32.const 1024) "%d \00%d\0A\00")
  (func $gen1 (param $primes i32) (result i32)
    (local $i i32)
    (local $n i32)
    (local $p i32)
    (i32.store align=4 (local.get $primes) (i32.const 2))
    (local.set $n (i32.const 1))
    (block $@block_1_break
      (local.set $p (i32.const 3))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $p) (global.get $N)))
        (block $@block_1_1_break
          (local.set $i (i32.const 1))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.eqz (block $@block_1_1_1_break (result i32) (drop (br_if $@block_1_1_1_break (i32.const 0) (i32.ge_s (local.get $i) (local.get $n)))) (drop (br_if $@block_1_1_1_break (i32.const 0) (i32.ge_s (i32.mul (i32.load align=4 (i32.add (local.get $primes) (i32.mul (local.get $i) (i32.const 4)))) (i32.load align=4 (i32.add (local.get $primes) (i32.mul (local.get $i) (i32.const 4))))) (local.get $p)))) (drop (br_if $@block_1_1_1_break (i32.const 0) (i32.eq (i32.rem_s (local.get $p) (i32.load align=4 (i32.add (local.get $primes) (i32.mul (local.get $i) (i32.const 4))))) (i32.const 0)))) (i32.const 1))))
            (local.set $i (i32.add (local.get $i) (i32.const 1)))
            (br $@block_1_1_continue)))
        (if (if (result i32) (i32.ge_s (local.get $i) (local.get $n)) (then (i32.const 1)) (else (i32.ne (i32.ne (i32.rem_s (local.get $p) (i32.load align=4 (i32.add (local.get $primes) (i32.mul (local.get $i) (i32.const 4))))) (i32.const 0)) (i32.const 0))))
          (then
            (i32.store align=4 (i32.add (local.get $primes) (i32.mul (local.get $n) (i32.const 4))) (local.get $p))
            (local.set $n (i32.add (local.get $n) (i32.const 1)))))
        (local.set $p (i32.add (local.get $p) (i32.const 2)))
        (br $@block_1_continue)))
    (local.get $n))
  (func $gen2 (param $primes i32) (result i32)
    (local $i i32)
    (local $n i32)
    (local $p i32)
    (local $d i32)
    (i32.store align=4 (local.get $primes) (i32.const 2))
    (local.set $n (i32.const 1))
    (block $@block_1_break
      (local.set $p (i32.const 3))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $p) (global.get $N)))
        (local.set $d (i32.const 0))
        (block $@block_1_1_break
          (local.set $i (i32.const 1))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $i) (local.get $n)))
            (local.set $d (i32.load align=4 (i32.add (local.get $primes) (i32.mul (local.get $i) (i32.const 4)))))
            (br_if $@block_1_1_break (if (result i32) (i32.ge_s (i32.mul (local.get $d) (local.get $d)) (local.get $p)) (then (i32.const 1)) (else (i32.ne (i32.eqz (i32.rem_s (local.get $p) (local.get $d))) (i32.const 0)))))
            (local.set $i (i32.add (local.get $i) (i32.const 1)))
            (br $@block_1_1_continue)))
        (if (block $@block_1_2_break (result i32) (drop (br_if $@block_1_2_break (i32.const 0) (i32.le_s (local.get $d) (i32.const 0)))) (drop (br_if $@block_1_2_break (i32.const 0) (i32.ge_s (local.get $d) (local.get $p)))) (drop (br_if $@block_1_2_break (i32.const 0) (i32.rem_s (local.get $p) (local.get $d)))) (i32.const 1))
          (then
            (local.set $p (i32.add (local.get $p) (i32.const 2)))
            (br $@block_1_continue)))
        (i32.store align=4 (i32.add (local.get $primes) (i32.mul (local.get $n) (i32.const 4))) (local.get $p))
        (local.set $n (i32.add (local.get $n) (i32.const 1)))
        (local.set $p (i32.add (local.get $p) (i32.const 2)))
        (br $@block_1_continue)))
    (local.get $n))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $i i32)
    (local $primes i32)
    (local $iter i32)
    (local $n i32)
    (local.set $@stack_entry (global.get $@stack))
    (local.set $primes (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.mul (i32.div_s (global.get $N) (i32.const 2)) (i32.const 4))) (i32.const 1)) (i32.const 8)))))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $iter) (i32.const 2)))
        (local.set $n (if (result i32) (i32.eqz (local.get $iter)) (then (call $gen1 (local.get $primes))) (else (call $gen2 (local.get $primes)))))
        (block $@block_1_1_break
          (local.set $i (i32.const 0))
          (loop $@block_1_1_continue
            (br_if $@block_1_1_break (i32.ge_s (local.get $i) (i32.sub (local.get $n) (i32.const 1))))
            (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $primes) (i32.mul (local.get $i) (i32.const 4))))))
            (call $printf (i32.const 1024) (global.get $@stack))
            (local.set $i (i32.add (local.get $i) (i32.const 1)))
            (br $@block_1_1_continue)))
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (i32.add (local.get $primes) (i32.mul (i32.sub (local.get $n) (i32.const 1)) (i32.const 4))))))
        (call $printf (i32.const 1028) (global.get $@stack))
        (local.set $iter (i32.add (local.get $iter) (i32.const 1)))
        (br $@block_1_continue)))
    (global.set $@stack (local.get $@stack_entry))
    (i32.const 0)))
