(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $precision f64 (f64.const 1.0E-9))
  (global $@stack (mut i32) (i32.const 8))
  (memory (export "memory") 1)
  (data (i32.const 1024) "\E2\88\9A%d = %.8f\0A\00")
  (func $my_sqrt (param $x f64) (result f64)
    (local $a f64)
    (local $b f64)
    (local $c f64)
    (local.set $b (local.get $x))
    (loop $@block_1_continue
      (local.set $c (f64.div (f64.add (local.get $a) (local.get $b)) (f64.const 2.0)))
      (if (f64.gt (f64.mul (local.get $c) (local.get $c)) (local.get $x))
        (then
          (local.set $b (local.get $c)))
        (else
          (local.set $a (local.get $c))))
      (br_if $@block_1_continue (f64.gt (f64.sub (local.get $b) (local.get $a)) (global.get $precision))))
    (f64.div (f64.add (local.get $a) (local.get $b)) (f64.const 2.0)))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $i i32)
    (local.set $@stack_entry (global.get $@stack))
    (local.set $i (i32.const 2))
    (loop $@block_1_continue
      (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $i)))
      (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
      (f64.store align=8 (global.get $@stack) (call $my_sqrt (f64.convert_i32_s (local.get $i))))
      (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
      (call $printf (i32.const 1024) (global.get $@stack))
      (local.set $i (i32.add (local.get $i) (i32.const 1)))
      (br_if $@block_1_continue (i32.le_s (local.get $i) (i32.const 10))))
    (global.set $@stack (local.get $@stack_entry))
    (i32.const 0)))
