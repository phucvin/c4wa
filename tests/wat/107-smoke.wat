(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $@stack (mut i32) (i32.const 8))
  (global $N i32 (i32.const 50))
  (global $sep i32 (i32.const 1024))
  (memory (export "memory") 1)
  (data (i32.const 1024) ", \00%s%d->%d\00\00\0A\00")
  (func $cycle (param $seed i64) (result i32)
    (local $len i32)
    (loop $@block_1_continue
      (if (i64.eq (local.get $seed) (i64.const 1))
        (then
          (return (local.get $len)))
        (else
          (if (i64.eqz (i64.rem_u (local.get $seed) (i64.const 2)))
            (then
              (local.set $seed (i64.div_u (local.get $seed) (i64.const 2))))
            (else
              (local.set $seed (i64.add (i64.mul (i64.const 3) (local.get $seed)) (i64.const 1)))))))
      (local.set $len (i32.add (local.get $len) (i32.const 1)))
      (br $@block_1_continue))
    (unreachable))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $printed i32)
    (local $max i32)
    (local $start i32)
    (local $i i32)
    (local $v i32)
    (local.set $@stack_entry (global.get $@stack))
    (local.set $max (i32.const -1))
    (local.set $start (i32.const 1))
    (block $@block_1_break
      (local.set $i (i32.const 1))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $printed) (global.get $N)))
        (local.set $v (call $cycle (i64.extend_i32_s (local.get $i))))
        (if (i32.le_s (local.get $v) (local.get $max))
          (then
            (local.set $i (i32.add (local.get $i) (i32.const 1)))
            (br $@block_1_continue)))
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (select (i32.const 1036) (global.get $sep) (local.get $start))))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $i)))
        (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
        (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $v)))
        (global.set $@stack (i32.sub (global.get $@stack) (i32.const 16)))
        (call $printf (i32.const 1027) (global.get $@stack))
        (local.set $max (local.get $v))
        (local.set $printed (i32.add (local.get $printed) (i32.const 1)))
        (local.set $start (i32.const 0))
        (if (i32.and (i32.lt_s (local.get $printed) (global.get $N)) (i32.eqz (i32.rem_s (local.get $printed) (i32.const 10))))
          (then
            (call $printf (i32.const 1037) (global.get $@stack))
            (local.set $start (i32.const 1))))
        (local.set $i (i32.add (local.get $i) (i32.const 1)))
        (br $@block_1_continue)))
    (call $printf (i32.const 1037) (global.get $@stack))
    (global.set $@stack (local.get $@stack_entry))
    (i32.const 0)))
