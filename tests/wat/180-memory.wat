(module
  (import "c4wa" "printf" (func $printf (param i32) (param i32)))
  (global $__mm_capacity (mut i32) (i32.const 0))
  (global $seed (mut i32) (i32.const 57))
  (global $__mm_stat_freed (mut i32) (i32.const 0))
  (global $__mm_inuse (mut i32) (i32.const 0))
  (global $__mm_expand_by (mut i32) (i32.const 10))
  (global $__mm_start (mut i32) (i32.const 0))
  (global $__mm_extra_offset (mut i32) (i32.const -1))
  (global $__mm_stat_allocated (mut i32) (i32.const 0))
  (global $@stack (mut i32) (i32.const 8))
  (global $__mm_first (mut i32) (i32.const -1))
  (global $storage (mut i32) (i32.const 0))
  (global $__mm_size (mut i32) (i32.const -1))
  (memory (export "memory") 1)
  (data (i32.const 1024) "\E2\80\BC\EF\B8\8F ASSERTION: \22unit->integrity == (unit->id ^ 816191)\22 @ line %d\0A\00Starting memory test with %d empty \22unit\22 pointers and %d iterations\0A\00Finished fixed memory test\0A\00A/R/C: %d/%d/%d; CAP: %d/%d\0A\00")
  (func $mulberry32 (result f64)
    (local $t i32)
    (global.set $seed (i32.add (global.get $seed) (i32.const 1831565813)))
    (local.set $t (global.get $seed))
    (local.set $t (i32.mul (i32.xor (local.get $t) (i32.shr_u (local.get $t) (i32.const 15))) (i32.or (local.get $t) (i32.const 1))))
    (local.set $t (i32.xor (local.get $t) (i32.add (local.get $t) (i32.mul (i32.xor (local.get $t) (i32.shr_u (local.get $t) (i32.const 7))) (i32.or (local.get $t) (i32.const 61))))))
    (f64.div (f64.convert_i32_u (i32.xor (local.get $t) (i32.shr_u (local.get $t) (i32.const 14)))) (f64.const 4.294967296E9)))
  (func $allocate (param $id i32) (result i32)
    (local $unit i32)
    (local.set $unit (call $malloc (i32.const 108)))
    (memory.fill (local.get $unit) (i32.const 0) (i32.const 108))
    (i32.store align=4 (local.get $unit) (local.get $id))
    (i32.store align=4 (i32.add (local.get $unit) (i32.const 4)) (i32.xor (local.get $id) (i32.const 816191)))
    (local.get $unit))
  (func $verify (param $unit i32)
    (local $@stack_entry i32)
    (local.set $@stack_entry (global.get $@stack))
    (if (i32.ne (i32.load align=4 (i32.add (local.get $unit) (i32.const 4))) (i32.xor (i32.load align=4 (local.get $unit)) (i32.const 816191)))
      (then
        (i64.store align=8 (global.get $@stack) (i64.const 48))
        (call $printf (i32.const 1024) (global.get $@stack))
        (unreachable)))
    (global.set $@stack (local.get $@stack_entry)))
  (func $main (export "main") (result i32)
    (local $@stack_entry i32)
    (local $actual_offset i32)
    (local $n_iter i32)
    (local $iter i32)
    (local $idx i32)
    (local $current i32)
    (local $in_use i32)
    (local $capacity i32)
    (local.set $@stack_entry (global.get $@stack))
    (local.set $actual_offset (i32.add (i32.const 1216) (i32.const 8)))
    (global.set $storage (local.get $actual_offset))
    (call $mm_init (i32.const 4000) (i32.const 108))
    (memory.fill (global.get $storage) (i32.const 0) (i32.const 4000))
    (local.set $n_iter (i32.const 100000))
    (i64.store align=8 (global.get $@stack) (i64.const 1000))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (local.get $n_iter)))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 8)))
    (call $printf (i32.const 1094) (global.get $@stack))
    (block $@block_1_break
      (local.set $iter (i32.const 0))
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $iter) (local.get $n_iter)))
        (local.set $idx (i32.trunc_f64_s (f64.mul (call $mulberry32) (f64.const 1000.0))))
        (if (i32.load align=4 (i32.add (global.get $storage) (i32.mul (local.get $idx) (i32.const 4))))
          (then
            (call $verify (i32.load align=4 (i32.add (global.get $storage) (i32.mul (local.get $idx) (i32.const 4)))))
            (call $free (i32.load align=4 (i32.add (global.get $storage) (i32.mul (local.get $idx) (i32.const 4)))))
            (i32.store align=4 (i32.add (global.get $storage) (i32.mul (local.get $idx) (i32.const 4))) (i32.const 0)))
          (else
            (i32.store align=4 (i32.add (global.get $storage) (i32.mul (local.get $idx) (i32.const 4))) (call $allocate (i32.add (i32.const 1) (local.get $iter))))))
        (local.set $iter (i32.add (local.get $iter) (i32.const 1)))
        (br $@block_1_continue)))
    (call $printf (i32.const 1164) (global.get $@stack))
    (local.set $iter (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $idx (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $current (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $in_use (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (local.set $capacity (global.get $@stack))
    (global.set $@stack (i32.add (i32.const 8) (i32.mul (i32.const 8) (i32.div_s (i32.sub (i32.add (global.get $@stack) (i32.const 4)) (i32.const 1)) (i32.const 8)))))
    (call $mm_stat (local.get $iter) (local.get $idx) (local.get $current) (local.get $in_use) (local.get $capacity))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $iter))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $idx))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $current))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $in_use))))
    (global.set $@stack (i32.add (global.get $@stack) (i32.const 8)))
    (i64.store align=8 (global.get $@stack) (i64.extend_i32_s (i32.load align=4 (local.get $capacity))))
    (global.set $@stack (i32.sub (global.get $@stack) (i32.const 32)))
    (call $printf (i32.const 1192) (global.get $@stack))
    (global.set $@stack (local.get $@stack_entry))
    (i32.const 0))
  (func $mm_init (param $extra_offset i32) (param $size i32)
    (if (block $@block_1_break (result i32) (drop (br_if $@block_1_break (i32.const 1) (i32.lt_s (local.get $extra_offset) (i32.const 0)))) (drop (br_if $@block_1_break (i32.const 1) (i32.lt_s (local.get $size) (i32.const 1)))) (drop (br_if $@block_1_break (i32.const 1) (global.get $__mm_start))) (i32.const 0))
      (then
        (unreachable)))
    (global.set $__mm_extra_offset (local.get $extra_offset))
    (global.set $__mm_size (i32.add (i32.mul (i32.div_s (i32.sub (local.get $size) (i32.const 1)) (i32.const 8)) (i32.const 8)) (i32.const 8)))
    (if (if (result i32) (i32.eqz (i32.const 1)) (then (i32.const 0)) (else (i32.ne (i32.gt_s (i32.rem_s (i32.add (i32.const 1221) (global.get $__mm_extra_offset)) (i32.const 8)) (i32.const 0)) (i32.const 0))))
      (then
        (global.set $__mm_extra_offset (i32.add (global.get $__mm_extra_offset) (i32.sub (i32.const 8) (i32.rem_s (i32.add (i32.const 1221) (global.get $__mm_extra_offset)) (i32.const 8)))))))
    (global.set $__mm_start (i32.add (i32.const 1221) (global.get $__mm_extra_offset))))
  (func $malloc (param $size i32) (result i32)
    (local $unit_size i32)
    (local $required i32)
    (local $j i32)
    (local $result i32)
    (global.set $__mm_stat_allocated (i32.add (global.get $__mm_stat_allocated) (i32.const 1)))
    (if (i32.eqz (global.get $__mm_start))
      (then
        (call $mm_init (i32.const 0) (local.get $size))))
    (if (i32.gt_s (local.get $size) (global.get $__mm_size))
      (then
        (unreachable)))
    (local.set $unit_size (i32.add (i32.const 1) (i32.mul (i32.const 8) (global.get $__mm_size))))
    (if (if (result i32) (i32.ge_s (global.get $__mm_first) (i32.const 0)) (then (i32.const 0)) (else (i32.ne (i32.eq (global.get $__mm_inuse) (global.get $__mm_capacity)) (i32.const 0))))
      (then
        (local.set $required (i32.add (i32.div_s (i32.add (i32.add (i32.const 1221) (global.get $__mm_extra_offset)) (i32.mul (i32.mul (i32.add (global.get $__mm_capacity) (global.get $__mm_expand_by)) (i32.const 8)) (local.get $unit_size))) (i32.const 64000)) (i32.const 1)))
        (if (i32.gt_s (local.get $required) (memory.size))
          (then
            (drop (memory.grow (i32.sub (local.get $required) (memory.size))))))
        (global.set $__mm_capacity (i32.add (global.get $__mm_capacity) (global.get $__mm_expand_by)))))
    (if (i32.lt_s (global.get $__mm_first) (i32.const 0))
      (then
        (if (i32.ge_s (global.get $__mm_inuse) (global.get $__mm_capacity))
          (then
            (unreachable)))
        (i64.store align=8 (i32.add (global.get $__mm_start) (i32.mul (i32.mul (global.get $__mm_inuse) (local.get $unit_size)) (i32.const 8))) (i64.const -1))
        (global.set $__mm_first (global.get $__mm_inuse))
        (global.set $__mm_inuse (i32.add (global.get $__mm_inuse) (i32.const 1)))))
    (if (i32.lt_s (global.get $__mm_first) (i32.const 0))
      (then
        (unreachable)))
    (local.set $required (i32.add (global.get $__mm_start) (i32.mul (i32.mul (global.get $__mm_first) (local.get $unit_size)) (i32.const 8))))
    (if (i64.eq (i64.load align=8 (local.get $required)) (i64.const 0))
      (then
        (unreachable)))
    (local.set $j (i32.wrap_i64 (i64.ctz (i64.load align=8 (local.get $required)))))
    (i64.store align=8 (local.get $required) (i64.xor (i64.load align=8 (local.get $required)) (i64.shl (i64.const 1) (i64.extend_i32_s (local.get $j)))))
    (local.set $result (i32.add (i32.add (local.get $required) (i32.const 8)) (i32.mul (local.get $j) (global.get $__mm_size))))
    (if (i64.eqz (i64.load align=8 (local.get $required)))
      (then
        (loop $@block_3_1_continue
          (global.set $__mm_first (i32.add (global.get $__mm_first) (i32.const 1)))
          (br_if $@block_3_1_continue (if (result i32) (i32.ge_s (global.get $__mm_first) (global.get $__mm_inuse)) (then (i32.const 0)) (else (i32.ne (i64.eqz (i64.load align=8 (i32.add (global.get $__mm_start) (i32.mul (i32.mul (global.get $__mm_first) (local.get $unit_size)) (i32.const 8))))) (i32.const 0))))))
        (if (i32.eq (global.get $__mm_first) (global.get $__mm_inuse))
          (then
            (global.set $__mm_first (i32.const -1))))))
    (local.get $result))
  (func $free (param $box i32)
    (local $unit_size i32)
    (local $offset i32)
    (local $idx i32)
    (local $cur i32)
    (local $j i32)
    (global.set $__mm_stat_freed (i32.add (global.get $__mm_stat_freed) (i32.const 1)))
    (local.set $unit_size (i32.add (i32.const 1) (i32.mul (i32.const 8) (global.get $__mm_size))))
    (local.set $offset (i32.sub (local.get $box) (global.get $__mm_start)))
    (local.set $idx (i32.div_s (i32.div_s (local.get $offset) (local.get $unit_size)) (i32.const 8)))
    (local.set $cur (i32.add (global.get $__mm_start) (i32.mul (i32.mul (local.get $idx) (local.get $unit_size)) (i32.const 8))))
    (local.set $j (i32.div_s (i32.sub (i32.sub (local.get $box) (local.get $cur)) (i32.const 8)) (global.get $__mm_size)))
    (if (i32.lt_s (local.get $j) (i32.const 0))
      (then
        (unreachable)))
    (if (i32.ge_s (local.get $j) (i32.const 64))
      (then
        (unreachable)))
    (if (i32.ne (local.get $box) (i32.add (i32.add (local.get $cur) (i32.const 8)) (i32.mul (local.get $j) (global.get $__mm_size))))
      (then
        (unreachable)))
    (if (i32.wrap_i64 (i64.and (i64.load align=8 (local.get $cur)) (i64.shl (i64.const 1) (i64.extend_i32_s (local.get $j)))))
      (then
        (unreachable)))
    (i64.store align=8 (local.get $cur) (i64.xor (i64.load align=8 (local.get $cur)) (i64.shl (i64.const 1) (i64.extend_i32_s (local.get $j)))))
    (if (i32.lt_s (local.get $idx) (global.get $__mm_first))
      (then
        (global.set $__mm_first (local.get $idx)))))
  (func $__mm_count_boxes (result i32)
    (local $unit_size i32)
    (local $res i32)
    (local $i i32)
    (local.set $unit_size (i32.add (i32.const 1) (i32.mul (i32.const 8) (global.get $__mm_size))))
    (block $@block_1_break
      (loop $@block_1_continue
        (br_if $@block_1_break (i32.ge_s (local.get $i) (global.get $__mm_inuse)))
        (local.set $res (i32.add (local.get $res) (i32.sub (i32.const 64) (i32.wrap_i64 (i64.popcnt (i64.load align=8 (i32.add (global.get $__mm_start) (i32.mul (i32.mul (local.get $i) (local.get $unit_size)) (i32.const 8)))))))))
        (local.set $i (i32.add (local.get $i) (i32.const 1)))
        (br $@block_1_continue)))
    (local.get $res))
  (func $mm_stat (param $allocated i32) (param $freed i32) (param $current i32) (param $in_use i32) (param $capacity i32)
    (i32.store align=4 (local.get $allocated) (global.get $__mm_stat_allocated))
    (i32.store align=4 (local.get $freed) (global.get $__mm_stat_freed))
    (i32.store align=4 (local.get $current) (call $__mm_count_boxes))
    (i32.store align=4 (local.get $in_use) (global.get $__mm_inuse))
    (i32.store align=4 (local.get $capacity) (global.get $__mm_capacity))))
